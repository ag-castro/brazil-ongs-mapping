# Generated by Django 2.2.15 on 2020-09-14 16:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import re
import utils.validators.identity.validator


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_auto_20200902_1919'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cause',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título da causa', max_length=50, unique=True, verbose_name='Causa')),
                ('slug', models.SlugField(unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), django.core.validators.RegexValidator(re.compile('^[-\\w]+\\Z'), "Enter a valid 'slug' consisting of Unicode letters, numbers, underscores, or hyphens.", 'invalid')], verbose_name='URL única')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Selecione a Causa pai', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='children', to='core.Cause', verbose_name='Causa Pai')),
            ],
            options={
                'verbose_name': 'Causa',
                'verbose_name_plural': 'Causas',
                'unique_together': {('title', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(help_text='Atividades que o membro realiza.', max_length=150, verbose_name='Atividade/Cargo')),
                ('be_since', models.DateField(verbose_name='Membro Desde')),
            ],
            options={
                'verbose_name': 'Membro da Organização',
                'verbose_name_plural': 'Membros das Organizações',
                'ordering': ['be_since', 'user'],
            },
        ),
        migrations.CreateModel(
            name='SocialNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[(0, 'FaceBook'), (1, 'Instagram'), (2, 'Linkedin'), (3, 'Twitter'), (4, 'YouTube')], max_length=50, verbose_name='Rede Social')),
                ('url', models.URLField(blank=True, help_text='Link do Perfil na rede social escolhida.', null=True, unique=True, verbose_name='URL do Perfil')),
            ],
            options={
                'verbose_name': 'Rede Social',
                'verbose_name_plural': 'Redes Sociais',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(auto_created=True, default='tku6rcgucadwy6htamcypnii0k2xxr5pbfjkuez2drn3r1nztxgkpbwjehy7', help_text='URL de exibição da ONG.', max_length=60, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), django.core.validators.RegexValidator(re.compile('^[-\\w]+\\Z'), "Enter a valid 'slug' consisting of Unicode letters, numbers, underscores, or hyphens.", 'invalid')], verbose_name='Slug')),
                ('cnpj', models.CharField(blank=True, max_length=30, null=True, unique=True, validators=[utils.validators.identity.validator.IdentityValidator()], verbose_name='CNPJ')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Nome da Organização')),
                ('intro', models.CharField(max_length=255, verbose_name='Apresentação')),
                ('about', models.TextField(verbose_name='Sobre a Organização')),
                ('founder', models.CharField(max_length=150, verbose_name='Fundador')),
                ('founded_at', models.IntegerField(choices=[(1900, 1900), (1901, 1901), (1902, 1902), (1903, 1903), (1904, 1904), (1905, 1905), (1906, 1906), (1907, 1907), (1908, 1908), (1909, 1909), (1910, 1910), (1911, 1911), (1912, 1912), (1913, 1913), (1914, 1914), (1915, 1915), (1916, 1916), (1917, 1917), (1918, 1918), (1919, 1919), (1920, 1920), (1921, 1921), (1922, 1922), (1923, 1923), (1924, 1924), (1925, 1925), (1926, 1926), (1927, 1927), (1928, 1928), (1929, 1929), (1930, 1930), (1931, 1931), (1932, 1932), (1933, 1933), (1934, 1934), (1935, 1935), (1936, 1936), (1937, 1937), (1938, 1938), (1939, 1939), (1940, 1940), (1941, 1941), (1942, 1942), (1943, 1943), (1944, 1944), (1945, 1945), (1946, 1946), (1947, 1947), (1948, 1948), (1949, 1949), (1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020)], help_text='Ano em que a Organização foi fundada.', verbose_name='Desde')),
                ('website', models.URLField(blank=True, help_text='Digite a URL completa do web site.', null=True, verbose_name='Web Site')),
                ('email', models.EmailField(blank=True, help_text='Digite um e-mail válido.', max_length=254, null=True, verbose_name='E-mail para Contatos')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Editado em')),
                ('causes', models.ManyToManyField(blank=True, related_name='organization_causes', to='core.Cause', verbose_name='Causas')),
                ('members', models.ManyToManyField(blank=True, to='core.Member', verbose_name='Membros')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='organizations', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('social_networks', models.ManyToManyField(blank=True, to='core.SocialNetwork', verbose_name='Membros')),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='social_networks',
            field=models.ManyToManyField(blank=True, to='core.SocialNetwork', verbose_name='Redes Sociais'),
        ),
        migrations.AddField(
            model_name='member',
            name='user',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_organization_member', to=settings.AUTH_USER_MODEL, verbose_name='Usuário'),
        ),
    ]
